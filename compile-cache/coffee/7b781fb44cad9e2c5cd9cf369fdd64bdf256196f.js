(function() {
  var LinterRust, linter;

  LinterRust = require('../lib/linter-rust');

  linter = new LinterRust();

  describe("LinterRust::parse", function() {
    it("should return 0 messages for an empty string", function() {
      return expect(linter.parse('')).toEqual([]);
    });
    it("should properly parse one line error message", function() {
      return expect(linter.parse('my/awesome file.rs:1:2: 3:4 error: my awesome text\n')).toEqual([
        {
          type: 'Error',
          text: 'my awesome text',
          filePath: 'my/awesome file.rs',
          range: [[0, 1], [2, 3]]
        }
      ]);
    });
    it("should properly parse one line warning message", function() {
      return expect(linter.parse('foo:33:44: 22:33 warning: äüö<>\n')).toEqual([
        {
          type: 'Warning',
          text: 'äüö<>',
          filePath: 'foo',
          range: [[32, 43], [21, 32]]
        }
      ]);
    });
    it("should return messages with a range of at least one character", function() {
      expect(linter.parse('foo:1:1: 1:1 error: text\n')).toEqual([
        {
          type: 'Error',
          text: 'text',
          filePath: 'foo',
          range: [[0, 0], [0, 1]]
        }
      ]);
      return expect(linter.parse('foo:1:1: 2:1 error: text\n')).toEqual([
        {
          type: 'Error',
          text: 'text',
          filePath: 'foo',
          range: [[0, 0], [1, 1]]
        }
      ]);
    });
    it("should properly parse multiline messages", function() {
      expect(linter.parse('bar:1:2: 3:4 error: line one\ntwo\n')).toEqual([
        {
          type: 'Error',
          text: 'line one\ntwo',
          filePath: 'bar',
          range: [[0, 1], [2, 3]]
        }
      ]);
      expect(linter.parse('bar:1:2: 3:4 error: line one\ntwo\nfoo:1:1: 1:2 warning: simple line\n')).toEqual([
        {
          type: 'Error',
          text: 'line one\ntwo',
          filePath: 'bar',
          range: [[0, 1], [2, 3]]
        }, {
          type: 'Warning',
          text: 'simple line',
          filePath: 'foo',
          range: [[0, 0], [0, 1]]
        }
      ]);
      return expect(linter.parse('bar:1:2: 3:4 error: line one\ntwo\nthree\nfoo:1   shouldnt match')).toEqual([
        {
          type: 'Error',
          text: 'line one\ntwo\nthree',
          filePath: 'bar',
          range: [[0, 1], [2, 3]]
        }
      ]);
    });
    return it("should also cope with windows line breaks", function() {
      var multi;
      expect(linter.parse('a:1:2: 3:4 error: a\r\nb\n')[0].text).toEqual('a\r\nb');
      multi = linter.parse('a:1:2: 3:4 error: a\n\rb\n\rx:1:2: 3:4 error: asd\r\n');
      expect(multi[0].text).toEqual('a\n\rb');
      return expect(multi[1].text).toEqual('asd');
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvYWxlbnovLmF0b20vcGFja2FnZXMvbGludGVyLXJ1c3Qvc3BlYy9wYXJzZS1zcGVjLmNvZmZlZSIKICBdLAogICJuYW1lcyI6IFtdLAogICJtYXBwaW5ncyI6ICJBQUFBO0FBQUEsTUFBQSxrQkFBQTs7QUFBQSxFQUFBLFVBQUEsR0FBYSxPQUFBLENBQVEsb0JBQVIsQ0FBYixDQUFBOztBQUFBLEVBRUEsTUFBQSxHQUFhLElBQUEsVUFBQSxDQUFBLENBRmIsQ0FBQTs7QUFBQSxFQUlBLFFBQUEsQ0FBUyxtQkFBVCxFQUE4QixTQUFBLEdBQUE7QUFDNUIsSUFBQSxFQUFBLENBQUcsOENBQUgsRUFBbUQsU0FBQSxHQUFBO2FBQ2pELE1BQUEsQ0FBTyxNQUFNLENBQUMsS0FBUCxDQUFhLEVBQWIsQ0FBUCxDQUF3QixDQUFDLE9BQXpCLENBQWlDLEVBQWpDLEVBRGlEO0lBQUEsQ0FBbkQsQ0FBQSxDQUFBO0FBQUEsSUFHQSxFQUFBLENBQUcsOENBQUgsRUFBbUQsU0FBQSxHQUFBO2FBQ2pELE1BQUEsQ0FBTyxNQUFNLENBQUMsS0FBUCxDQUFhLHNEQUFiLENBQVAsQ0FDRSxDQUFDLE9BREgsQ0FDVztRQUFDO0FBQUEsVUFDUixJQUFBLEVBQU0sT0FERTtBQUFBLFVBRVIsSUFBQSxFQUFNLGlCQUZFO0FBQUEsVUFHUixRQUFBLEVBQVUsb0JBSEY7QUFBQSxVQUlSLEtBQUEsRUFBTyxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBRCxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVCxDQUpDO1NBQUQ7T0FEWCxFQURpRDtJQUFBLENBQW5ELENBSEEsQ0FBQTtBQUFBLElBWUEsRUFBQSxDQUFHLGdEQUFILEVBQXFELFNBQUEsR0FBQTthQUNuRCxNQUFBLENBQU8sTUFBTSxDQUFDLEtBQVAsQ0FBYSxtQ0FBYixDQUFQLENBQ0UsQ0FBQyxPQURILENBQ1c7UUFBQztB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

//# sourceURL=/home/alenz/.atom/packages/linter-rust/spec/parse-spec.coffee
